{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IPRBProxyFactory",
						"name": "factory_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "PRBProxyRegistry__ProxyAlreadyExists",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "deploy",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "proxy",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "deployFor",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "proxy",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "contract IPRBProxyFactory",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "getCurrentProxy",
				"outputs": [
					{
						"internalType": "contract IPRBProxy",
						"name": "proxy",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Paul Razvan Berg",
			"kind": "dev",
			"methods": {
				"deploy()": {
					"details": "Sets \"msg.sender\" as the owner of the proxy. Requirements: - All from \"deployFor\".",
					"returns": {
						"proxy": "The address of the newly deployed proxy contract."
					}
				},
				"deployFor(address)": {
					"details": "Requirements: - The proxy must either not exist or its ownership must have been transferred by the owner.",
					"params": {
						"owner": "The owner of the proxy."
					},
					"returns": {
						"proxy": "The address of the newly deployed proxy contract."
					}
				},
				"getCurrentProxy(address)": {
					"params": {
						"owner": "The address of the owner of the current proxy."
					}
				}
			},
			"title": "PRBProxyRegistry",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"PRBProxyRegistry__ProxyAlreadyExists(address)": [
					{
						"notice": "Emitted when a proxy already exists for the given owner."
					}
				]
			},
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "CONSTRUCTOR ///"
				},
				"deploy()": {
					"notice": "Deploys a new proxy instance via the proxy factory."
				},
				"deployFor(address)": {
					"notice": "Deploys a new proxy instance via the proxy factory, for the given owner."
				},
				"factory()": {
					"notice": "Address of the proxy factory contract."
				},
				"getCurrentProxy(address)": {
					"notice": "Gets the current proxy of the given owner."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PRBProxyRegistry.sol": "PRBProxyRegistry"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/IPRBProxy.sol": {
			"keccak256": "0xdff1edd912c2f4badbe6194b334322cfe445d4b337a60318f0bde70ed15ee57c",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://9b5aa8aab20225d0972f8ffd2d4be80b2b468497db522a0b1400cd8888a461e0",
				"dweb:/ipfs/QmWiEEs9CZaBvSGJDGCAuEGsHBf2XVYAs6DUzRLEkMT5wn"
			]
		},
		"contracts/IPRBProxyFactory.sol": {
			"keccak256": "0xbfc0fd448f80f8b981ceba381692da17fd6086a7219d5e4423e34ea9e0184c27",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://f0f9fcb91a97fe39c13340ea19cffc3a6de468c5e2e6d6264dd9b4a721e51a52",
				"dweb:/ipfs/QmW4cpEpwXp1SJ7tbzcyyG5yDYpkydPBXCpuPPmt3AMagv"
			]
		},
		"contracts/IPRBProxyRegistry.sol": {
			"keccak256": "0xef289accfd3cc0ed4a2d074a334c869f10d901d4524cf523e17fcfc1da7e5f68",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://f8af14509ab689380d1e911aec84462db404e42cf363bc713d7470012193285c",
				"dweb:/ipfs/QmekcFdw8ovdmzLsUvtDAt4bwLFHtDGbb9dEp7NHedqoby"
			]
		},
		"contracts/PRBProxyRegistry.sol": {
			"keccak256": "0x745d011362dcb3ace1feab8eb720e154e5be04447cffbecd395d2237eccad9b3",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://09efa8fb401da0f6c8129b85b0682ae2a53e5cd5312116c08a75a720e4e26411",
				"dweb:/ipfs/QmdEKi2N8FCysMK3x7Wd9WaoH4FujCiLQT9pN2B53ZdNRS"
			]
		}
	},
	"version": 1
}